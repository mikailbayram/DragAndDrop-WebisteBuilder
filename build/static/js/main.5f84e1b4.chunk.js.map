{"version":3,"sources":["builder/components/content/index.js","builder/components/content-builder/ContentBuilderComponent.js","builder/component-types.js","builder/components/content-builder/ContentBuilderDraggableComponent.js","builder/components/content-builder/ContentBuilderGridComponent.js","builder/components/draggable/index.js","builder/components/droppable/index.js","builder/components/grid/index.js","builder/components/grid-item/index.js","builder/draggable-components.js","builder/layout.js","App.js","serviceWorker.js","index.js"],"names":["ContentComponent","children","className","ContentBuilderComponent","this","props","components","id","onDragOver","onDragDrop","map","componentIndex","name","type","key","ev","onDrop","React","Component","ContentBuilderDraggableComponent","ComponentType","onDragStart","draggable","dropped","ContentBuilderGridComponent","gridItemIndex","gridItemChildren","renderProps","gridId","size","child","index","DraggableComponent","DroppableComponent","data-id","GridComponent","getMatGridSizeClass","GridItemComponent","cssClass","DraggableComponents","originalState","Layout","state","dashboardState","isDragging","bind","event","dataTransfer","setData","preventDefault","containerId","getData","newComponent","generateComponent","containerArray","split","shift","componentsPath","forEach","push","parseInt","componentState","fromJS","setIn","getIn","setState","toJS","gridItem","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.5f84e1b4.chunk.js","sourcesContent":["import React from 'react';\nimport './content-component.css';\n\nexport const ContentComponent = ({ children, className = '' }) =>\n    <div className={className}>\n        <div className='content'>\n            {children}\n        </div>\n    </div>;\n","import React from 'react';\n\nimport { ContentComponent, DroppableComponent } from '../';\nimport { ContentBuilderDraggableComponent } from './';\n\n\nexport class ContentBuilderComponent extends React.Component {\n\n  render() {\n    const { components, id, onDragOver, onDragDrop } = this.props;\n    return (\n      <ContentComponent>\n        {\n          components.map(({ name, type, children }, componentIndex) => (\n            <ContentBuilderDraggableComponent\n              key={`${id}_${componentIndex}`}\n              id={`${id}_${componentIndex}`}\n              name={name}\n              type={type}\n              children={children}\n              onDragOver={onDragOver}\n              onDragDrop={onDragDrop}\n            />\n          ))}\n          <DroppableComponent\n            name={id}\n            onDragOver={(ev) => onDragOver(ev)}\n            onDrop={(ev) => onDragDrop(ev, id)}\n          />\n      </ContentComponent>\n    );\n  }\n\n}","export default {\n    CARD: 'card',\n    HEADING: 'heading',\n    GRID: 'grid',\n    GRID_ITEM: 'grid_item'\n}\n","import * as React from 'react';\nimport { DraggableComponent } from '../';\nimport { ContentBuilderGridComponent } from './';\nimport ComponentType from '../../component-types';\n\nexport const ContentBuilderDraggableComponent = ({\n  id,\n  name,\n  type,\n  children,\n  onDragOver,\n  onDragDrop\n}) => {\n  if (type === ComponentType.GRID) {\n    return <ContentBuilderGridComponent\n      id={id}\n      children={children}\n      onDragOver={onDragOver}\n      onDragDrop={onDragDrop}\n    />;\n  } else {\n    return (\n      <DraggableComponent\n        key={`drag-${id}`}\n        name={name}\n        type={type}\n        onDragStart={() => null}\n        draggable={false}\n        dropped={true}\n      />\n    );\n  }\n};","import  React from 'react';\n\nimport { DroppableComponent, GridComponent, GridItemComponent  } from '../';\nimport { ContentBuilderDraggableComponent } from './';\n\n\nexport const ContentBuilderGridComponent = ({\n  id,\n  children,\n  onDragOver,\n  onDragDrop\n}) => (\n  <GridComponent key={id}>\n    {\n      children.map(({ children: gridItemChildren, renderProps }, gridItemIndex) => {\n        const gridId = `${id}_${gridItemIndex}`;\n        return (\n          <GridItemComponent key={gridId} size={renderProps.size}>\n            {\n              gridItemChildren.map((child, index) => (\n                <ContentBuilderDraggableComponent\n                  key={`${gridId}_${index}`}\n                  id={`${gridId}_${index}`}\n                  name={child.name}\n                  type={child.type}\n                  children={child.children}\n                  onDragOver={onDragOver}\n                  onDragDrop={onDragDrop}\n                />\n              ))\n            }\n            <DroppableComponent\n              name={gridId}\n              onDragOver={(ev) => onDragOver(ev)}\n              onDrop={(ev) => onDragDrop(ev, gridId)}\n            />\n          </GridItemComponent>\n        );\n      })}\n  </GridComponent>\n);","import * as React from 'react';\nimport './draggable-component.css';\n\nexport const DraggableComponent = ({\n  name,\n  type,\n  onDragStart,\n  draggable = true,\n  dropped = false\n}) =>\n  <div className='draggable-component' draggable={draggable} onDragStart={(ev) => onDragStart(ev, name, type)}>\n    {name}\n  </div>;","\nimport * as React from 'react';\nimport './droppable.css';\n\n\nexport const DroppableComponent = ({ name, onDragOver, onDrop, children }) =>\n    <div\n        className='droppable-component'\n        onDragOver={(ev) => onDragOver(ev)}\n        onDrop={(ev) => onDrop(ev, name)}\n        data-id={name}\n    >\n        <span>Drop components here!</span>\n        {children}\n    </div>;","import  React from 'react';\n\n\nexport const GridComponent = ({ children }) =>\n  <div className='mdc-layout-grid'>\n    <div className='mdc-layout-grid__inner'>\n      {children}\n    </div>\n  </div>;","import React from 'react';\n\nexport function getMatGridSizeClass(size) {\n    return `mdc-layout-grid__cell mdc-layout-grid__cell--span-${size}`;\n}\n\n\nexport const GridItemComponent = ({ size, children, cssClass = '' }) =>\n    <div className={`${getMatGridSizeClass(size)}${cssClass !== '' ? ` ${cssClass}` : ''}`}>\n        {children}\n    </div>;","import ComponentType from './component-types';\n\nexport const DraggableComponents = [\n    {\n      children: [],\n      name: 'Card',\n      type: ComponentType.CARD\n    },\n    {\n      children: [],\n      name: 'Grid',\n      type: ComponentType.GRID\n    },\n    {\n      children: [],\n      name: 'Heading',\n      type: ComponentType.HEADING\n    }\n  ];","import { fromJS } from 'immutable';\nimport React from 'react';\n\nimport './layout.css';\n\nimport { ContentBuilderComponent, DraggableComponent } from './components';\nimport { DraggableComponents } from './draggable-components';\nimport ComponentType from './component-types';\n\nconst INT_LENGTH = 3;\n\nconst originalState = [\n    {\n        components: []\n    },\n    {\n        components: []\n    },\n    {\n        components: []\n    },\n];\n\nclass Layout extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            dashboardState: originalState,\n            isDragging: false\n        }\n        this.onDragStart = this.onDragStart.bind(this);\n        this.onDragDrop = this.onDragDrop.bind(this);\n    }\n\n    render() {\n        const { dashboardState } = this.state;\n        return (\n            <div className='builder'>\n                <div className='builder-draggables'>\n                    {\n                        DraggableComponents.map(({ name, type }, index) =>\n                            <DraggableComponent\n                                key={`comp-${index}`}\n                                name={name}\n                                type={type}\n                                onDragStart={this.onDragStart}\n                                dropped={false}\n                            />\n                        )}\n                </div>\n                <div className='builder-droppables'>\n                    {\n                        dashboardState.map(({ id, cssClass, components }, index) => (\n                            <ContentBuilderComponent\n                                key={`cb_${index}`}\n                                id={`cb_${index}`}\n                                cssClass={cssClass}\n                                components={components}\n                                onDragDrop={this.onDragDrop}\n                                onDragOver={(ev) => this.onDragOver(ev)}\n                            />\n                        )\n                        )}\n                </div>\n            </div>\n        );\n    }\n\n    onDragStart(event, name, type) {\n        event.dataTransfer.setData('id', name);\n        event.dataTransfer.setData('type', type);\n    }\n\n    onDragOver(event) {\n        event.preventDefault();\n    }\n\n    /**\n     * Handles drop into droppable component and updates application state\n     * Create new component based on draggable name and type\n     * Create an array of indexes to determine position in state\n     * Loop through array of indexes and build out path to update\n     * Create ImmutableJS object and update path with new component\n     * Save state\n     * @param event\n     * @param containerId\n     */\n    onDragDrop(event, containerId) {\n        const name = event.dataTransfer.getData('id');\n        const type = event.dataTransfer.getData('type');\n        const newComponent = this.generateComponent(name, type);\n        const containerArray = containerId.split('_');\n        containerArray.shift(); // ignore first param, it is string prefix\n        const componentsPath = [];\n        containerArray.forEach((id, index) => {\n            componentsPath.push(parseInt(id, INT_LENGTH));\n            componentsPath.push(index === 0 ? 'components' : 'children');\n        });\n        const { dashboardState } = this.state;\n        let componentState = fromJS(dashboardState);\n        componentState = componentState.setIn(componentsPath, componentState.getIn(componentsPath).push(newComponent));\n        this.setState({ dashboardState: componentState.toJS() });\n        this.setState({ dashboardState: componentState.toJS() });\n    }\n\n    generateComponent(name, type) {\n        let newComponent = {\n            name,\n            type\n        };\n        if (type === ComponentType.GRID) { // TODO - predefine this somewhere else (default props)\n            const gridItem = {\n                children: [],\n                name: '',\n                renderProps: {\n                    size: 6 // <- make this configurable\n                },\n                type: ComponentType.GRID_ITEM\n            };\n            newComponent = {\n                ...newComponent,\n                children: [gridItem, gridItem] // <- make this configurable\n            };\n        }\n        return newComponent;\n    }\n\n}\n\nexport default Layout;","import React from 'react';\n\nimport '@material/layout-grid/mdc-layout-grid.scss';\nimport Layout from './builder/layout';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Layout />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}